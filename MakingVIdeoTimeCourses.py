import numpy as np
import sys
import os
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
import matplotlib.animation as animation



# First delimit the file generated by


# Sample matrix with random data (replace this with your actual data)
# Load the matrix from a .txt file
# Update the file path to your actual text file
file_path = sys.argv[1]  # Replace with the actual file path

# Assuming the .txt file contains space-separated numerical values
variable_used = np.loadtxt(file_path, delimiter=',')  # Load data from the file

# Determine the number of rows and columns in the loaded text file
num_rows, num_cols = variable_used.shape
print(f"The text file has {num_rows} rows and {num_cols} columns.")

# Extract data (from row 4 to the last row)
data = variable_used[3:num_rows, :]
print(f"Data dimensions: {data.shape}")

# Define a set of colors for each plot line
colors = plt.cm.viridis(np.linspace(0, 1, num_cols))  # Generate distinct colors for each line

# Compute PSC (percent signal change)
data_PSC_mc = np.zeros_like(data)
mean_psc_mc = np.zeros((2, num_cols))

for ii in range(num_cols):
    baseline_mean = np.mean(data[:550, ii])
    data_PSC_mc[:, ii] = ((data[:, ii] - baseline_mean) / baseline_mean) * 100
    
num_rows_psc, num_cols_psc = data_PSC_mc.shape
print(f"The new text file has {num_rows_psc} rows and {num_cols_psc} columns.")

coordinates = variable_used[:3, :]

x_coords = coordinates[0, :]
y_coords = coordinates[1, :]
z_coords = coordinates[2, :]

# Prepare the figure
fig, ax = plt.subplots(figsize=(10, 6))

# Define the function that will update the plot for each frame
def update(i):
    ax.clear()  # Clear the current plot
    
    # Plot the i-th column with the corresponding color
    ax.plot(data_PSC_mc[:, i], linewidth=3, color=colors[i])
    ax.set_title(f"Column {i+1}", fontsize=20)
    ax.set_xlabel("Time (in sec)", fontsize=15, fontweight='bold')
    ax.set_ylabel("Percent Signal Change", fontsize=15, fontweight='bold')
    ax.set_xlim([1, data.shape[0]])
    ax.set_ylim([-50, 50])

    # Add shaded region from x=570 to x=870
    xShade = [570, 870, 870, 570]
    yShade = [-20, -20, 20, 20]
    shade = Polygon(np.column_stack([xShade, yShade]), closed=True, color=(0.4, 0.9, 0.4), alpha=0.3)
    ax.add_patch(shade)

    # Set title for voxel coordinates
    value1, value2, value3 = x_coords[i], y_coords[i], z_coords[i]
    title_str = f"Matrix Values: Read = {value1:.0f}, Phase = {value2:.0f}, Slice = {value3:.0f}"
    ax.set_title(title_str, fontsize=18)

# Create the animation using FuncAnimation
ani = animation.FuncAnimation(fig, update, frames=num_cols, repeat=False)

# Optional: Save the animation as a video file (if you want to create a movie)
# To save as video (use FFMpeg writer or OpenCV)
# ani.save('my_column_movie.mp4', writer='ffmpeg', fps=1)

# Display the animation
plt.show()


base_name = os.path.splitext(os.path.basename(file_path))[0]

output_file = f"{base_name}_movie.mp4"
ani.save(output_file, writer='ffmpeg', fps=1)
